import { useState, useRef, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Send, Bot, User, Loader } from 'lucide-react';

const Chat = () => {
  const { t } = useTranslation();
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'bot',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¢–∞–ª–∞–ø–∫–µ—Ä –ñ–µ–ó–£. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö, –≥—Ä–∞–Ω—Ç–∞—Ö –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

const handleSendMessage = async (e) => {
  e.preventDefault();

  if (!inputMessage.trim() || isLoading) return;

  const userMessage = {
    id: messages.length + 1,
    type: 'user',
    content: inputMessage,
    timestamp: new Date()
  };

  setMessages(prev => [...prev, userMessage]);
  setInputMessage('');
  setIsLoading(true);

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await fetch('http://localhost:5000/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
        // –î–æ–±–∞–≤—å—Ç–µ Authorization, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
      },
      body: JSON.stringify({
        messages: [
          // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          ...messages.map(m => ({
            role: m.type === 'user' ? 'user' : 'assistant',
            content: m.content
          })),
          { role: 'user', content: inputMessage }
        ]
      })
    });

    const data = await response.json();
    const botContent = data.choices?.[0]?.message?.content || '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT';

    const botMessage = {
      id: messages.length + 2,
      type: 'bot',
      content: botContent,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, botMessage]);
  } catch (err) {
    setMessages(prev => [
      ...prev,
      {
        id: messages.length + 2,
        type: 'bot',
        content: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
        timestamp: new Date()
      }
    ]);
  } finally {
    setIsLoading(false);
  }
};

  const generateBotResponse = (userInput) => {
    const input = userInput.toLowerCase();
    
    if (input.includes('—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å') || input.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∞')) {
      return `–í –ñ–µ–ó–£ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:

üéì **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
- –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è
- –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üë• **–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏:**
- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è
- –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞
- –§–∏–ª–æ–ª–æ–≥–∏—è

üî¨ **–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏:**
- –ë–∏–æ–ª–æ–≥–∏—è
- –•–∏–º–∏—è
- –≠–∫–æ–ª–æ–≥–∏—è

–ö–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ª—é–±–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.`;
    }
    
    if (input.includes('–≥—Ä–∞–Ω—Ç') || input.includes('—Å—Ç–∏–ø–µ–Ω–¥–∏—è')) {
      return `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞–Ω—Ç–∞—Ö –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö –≤ –ñ–µ–ó–£:

üí∞ **–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞–Ω—Ç:**
- –ü–æ–∫—Ä—ã–≤–∞–µ—Ç 100% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
- –í—ã–¥–∞–µ—Ç—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ï–ù–¢
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω—Ç–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º

üèÜ **–°—Ç–∏–ø–µ–Ω–¥–∏–∏:**
- –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è (–¥–ª—è –æ—Ç–ª–∏—á–Ω–∏–∫–æ–≤)
- –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è (–¥–ª—è –ª—å–≥–æ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
- –ò–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏

üìÖ **–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**
- –ü–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –∏—é–Ω—å-–∏—é–ª—å
- –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ: –∞–≤–≥—É—Å—Ç

–ù—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?`;
    }
    
    if (input.includes('–µ–Ω—Ç') || input.includes('–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ') || input.includes('—ç–∫–∑–∞–º–µ–Ω')) {
      return `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –ñ–µ–ó–£:

üìù **–ï–ù–¢ (–ï–¥–∏–Ω–æ–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):**
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: –ö–∞–∑–∞—Ö—Å–∫–∏–π/–†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
- –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: 50 –±–∞–ª–ª–æ–≤

üìã **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**
- –ó–∞—è–≤–ª–µ–Ω–∏–µ
- –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
- –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:**
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 (7282) 23-88-49
- Email: info@zhezu.edu.kz
- –ê–¥—Ä–µ—Å: –≥. –¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω, —É–ª. –ñ–∞–Ω—Å—É–≥—É—Ä–æ–≤–∞, 187–ê

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?`;
    }
    
    if (input.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || input.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || input.includes('–∞–¥—Ä–µ—Å')) {
      return `–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ñ–µ–ó–£:

üè¢ **–ê–¥—Ä–µ—Å:**
–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –≥. –¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω
—É–ª. –ñ–∞–Ω—Å—É–≥—É—Ä–æ–≤–∞, 187–ê

üìû **–¢–µ–ª–µ—Ñ–æ–Ω—ã:**
- –ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: +7 (7282) 23-88-49
- –î–µ–∫–∞–Ω–∞—Ç: +7 (7282) 23-88-50
- –û–±—â–∏–π: +7 (7282) 23-88-48

üìß **Email:**
- info@zhezu.edu.kz
- admission@zhezu.edu.kz

üåê **–í–µ–±-—Å–∞–π—Ç:**
https://zhezu.edu.kz

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**
–ü–Ω-–ü—Ç: 9:00-18:00
–°–±: 9:00-13:00`;
    }
    
    if (input.includes('—Ç–µ—Å—Ç') || input.includes('–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è')) {
      return `–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.

üéØ **–ù–∞—à —Ç–µ—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç:**
- 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—è–º
- –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º –ñ–µ–ó–£
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π PDF-–æ—Ç—á–µ—Ç

–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ - –æ–Ω –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 10-15 –º–∏–Ω—É—Ç –∏ –¥–∞—Å—Ç –≤–∞–º —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.

–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–¢–µ—Å—Ç".`;
    }
    
    // Default response
    return `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –ñ–µ–ó–£.

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ üìö –í—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä–∞–Ω—Ç–∞—Ö –∏ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö
‚Ä¢ üìù –ü—Ä–æ—Ü–µ–¥—É—Ä–æ–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –ï–ù–¢
‚Ä¢ üìû –ö–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
‚Ä¢ üéØ –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º

–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`;
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const quickQuestions = [
    '–ö–∞–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –≤ –ñ–µ–ó–£?',
    '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω—Ç?',
    '–ö–æ–≥–¥–∞ –ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?',
    '–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏'
  ];

  const handleQuickQuestion = (question) => {
    setInputMessage(question);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 gradient-bg rounded-full flex items-center justify-center mx-auto mb-4">
            <Bot className="text-white" size={32} />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {t('chatTitle')}
          </h1>
          <p className="text-gray-600">
            –ó–∞–¥–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –ñ–µ–ó–£
          </p>
        </div>

        {/* Quick Questions */}
        <div className="mb-6">
          <p className="text-sm text-gray-600 mb-3">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
          <div className="flex flex-wrap gap-2">
            {quickQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => handleQuickQuestion(question)}
                className="px-3 py-2 bg-white border border-gray-200 rounded-lg text-sm text-gray-700 hover:border-primary-300 hover:text-primary-600 transition-all duration-200"
              >
                {question}
              </button>
            ))}
          </div>
        </div>

        {/* Chat Container */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 flex flex-col h-96 md:h-[500px]">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`flex max-w-xs md:max-w-md lg:max-w-lg ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
                  {/* Avatar */}
                  <div className={`flex-shrink-0 ${message.type === 'user' ? 'ml-3' : 'mr-3'}`}>
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      message.type === 'user' 
                        ? 'bg-primary-600' 
                        : 'bg-secondary-600'
                    }`}>
                      {message.type === 'user' ? (
                        <User className="text-white" size={16} />
                      ) : (
                        <Bot className="text-white" size={16} />
                      )}
                    </div>
                  </div>

                  {/* Message Bubble */}
                  <div className={`rounded-lg px-4 py-2 ${
                    message.type === 'user'
                      ? 'bg-primary-600 text-white'
                      : 'bg-gray-100 text-gray-900'
                  }`}>
                    <div className="whitespace-pre-wrap text-sm md:text-base">
                      {message.content}
                    </div>
                    <div className={`text-xs mt-1 ${
                      message.type === 'user' ? 'text-primary-100' : 'text-gray-500'
                    }`}>
                      {formatTime(message.timestamp)}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {/* Loading indicator */}
            {isLoading && (
              <div className="flex justify-start">
                <div className="flex mr-3">
                  <div className="w-8 h-8 bg-secondary-600 rounded-full flex items-center justify-center mr-3">
                    <Bot className="text-white" size={16} />
                  </div>
                  <div className="bg-gray-100 rounded-lg px-4 py-2">
                    <div className="flex items-center space-x-1">
                      <Loader className="animate-spin text-gray-500" size={16} />
                      <span className="text-gray-600 text-sm">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input Form */}
          <div className="border-t border-gray-100 p-4">
            <form onSubmit={handleSendMessage} className="flex space-x-3">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder={t('chatPlaceholder')}
                className="flex-1 input-field"
                disabled={isLoading}
              />
              <button
                type="submit"
                disabled={!inputMessage.trim() || isLoading}
                className="btn-primary px-4 py-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Send size={20} />
              </button>
            </form>
          </div>
        </div>

        {/* Info */}
        <div className="mt-6 text-center">
          <p className="text-sm text-gray-500">
            –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –ñ–µ–ó–£
          </p>
        </div>
      </div>
    </div>
  );
};

export default Chat;